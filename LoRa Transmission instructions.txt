--How to set up LoRa transmission--
Written by David Trail
Note: This is is just setting up transmission and LoRa module configuration, because I did not write the sensing code, that is not covered in this document


Table of contents:

1. UG setup
	1.1 Installing dependencies
	1.2 Path setup
	1.3 Cronjob setup
2. AG setup
	2.1 Installing dependencies
	2.2 Path setup in REC code
	2.3 Path setup in UPLOAD code
	2.4 Cronjob setup
3. LoRa Module configuration
	3.1 Setting modifications to LoRa Module
	3.2 channel configuration

1. UG setup
	1.1 Installing dependencies 
		- Install Meshtastic python libraries
		- "pip3 install meshtastic"
		- Install cbor2 (library for compression, may already be installed on raspberry pi)
		- "pip3 install cbor2"
		- make folder for files
		-"mkdir IoTSensor"
		- download LoRa sending code from GitHub, and place in IoTSensor
	1.2 Path setup
		- Find serial port LoRa module is plugged into
			- Go to online serial monitor website, and find out the location of the LoRa Module, it is likely "/dev/ttyACM0", but it could be different
			- replace the serial port of the LoRa that you found in the SERIAL_PORT variable
		- Edit path for the file that is being pulled for soil data
			-This is going to be the file that the sensor code is outputting to, this NEEDS to be an absolute  path
			- Let's call this file "soil_data.csv"
			- If the file is being output in the IoTSensor folder the path should look something like this
			-"/home/pi/IoTSensor/soil_data.csv"
			- put that in the CSV_FILE_PATH variable

	1.3 Cronjob setup
			- This automates the transmission to go on startup and logs the information about sending
			-"sudo crontab -e"
			- go to the bottom of the file and type this. (Replace files paths as needed)
			- "* * * * * /usr/bin/python3 /home/pi/IoTSensor/FINAL_SEND.py >> /home/pi/IoTSensor/send.log 2>&1"
			- the starts indicate start on boot, the second file path is using python to execute the program.

2. AG setup
	2.1 Installing dependencies 
		- Install Meshtastic python libraries
		- "pip3 install meshtastic"
		- Install cbor2 (library for compression, may already be installed on raspberry pi)
		- "pip3 install cbor2"
		- make folder for files
		-"mkdir IoTSensor"
		- download LoRa receiving and upload code from GitHub, and place in IoTSensor
	2.2 Path setup in REC code
		- Find serial port LoRa module is plugged into
			- Go to online serial monitor website, and find out the location of the LoRa Module, it is likely "/dev/ttyACM0", but it could be different
			- replace the serial port of the LoRa that you found in the SERIAL_PORT variable
		-Edit the file path for where the received data is being output towards, once again needs to be an absolute path
			-let's call this "received_data.csv"
			-if you are following our file system it should look like this
			-"/home/pi/IoTSensor/received_data.csv"
			-put that in the "OUTPUT_FILE_PATH variable
	2.3 Path setup in UPLOAD code
		- Modify API_KEY and CHANNEL_ID variables in accordance with the design report
		- on line 23, the the code reads where the REC code wrote to, replace this with absolute file path. For example using the same file system:
		
		-"try:
        df = pd.read_csv("/home/pi/IoTSensor/received.csv", header=None, #THIS IS AN RELATIVE PATH, CHANGE TO ABSOLUTE
                         names=["created_at", "field1", "field2", "field3", "field4", "field5", "field6", "field7"])"

	2.4 Cronjob setup
- This automates the transmission to go on startup and logs the information about sending
			-"sudo crontab -e"
			- go to the bottom of the file and type this for the REC code. (Replace files paths as needed)
			- "* * * * * /usr/bin/python3 /home/pi/IoTSensor/FINAL_REC.py >> /home/pi/IoTSensor/send.log 2>&1"
			- and for the UPLOAD CODE
			- "* * * * * /usr/bin/python3 /home/pi/IoTSensor/FINAL_UPLOAD.py >> /home/pi/IoTSensor/upload.log 2>&1"
			- the starts indicate start on boot, the second file path is using python to execute the program.

3. LoRa Module configuration
	3.1 Setting modifications to LoRa Module
		- Connect to LoRa Module via serial port and go to the web meshtkatsic web client, this can also be done with the meshtastic mobile app, or CLI, but instructions will be for web client.
		- For each of these settings look them up on the search bar to find them faster
		- disable wifi
		- set spreading factor to 10
		- set coding rate to 8
		- set tx power to 20 (this is the max of the heltec gnss tracker)
		- set bandwidth to 125
		- disable gps
		-repeat steps with the other lora module.
		- make sure to save the options, the device should restart after properly saving a new option

	3.2 channel configuration
		- Connect both device to the meshtastic mobile app, on different phones
		- Open radio configuration tab on the mobile app, name channel "#IoTSensor"
		- With the other device scan the channel configuration QR code, this will put both devices on the same channel for communication

	FOR MORE INFORMATION ON MESHTASTIC OR CONFIGURATION SEE: https://meshtastic.org/
		
			